knitr::opts_chunk$set(echo = TRUE)
required_packages <- c("glue", "readr", "dplyr", "ggplot2", "knitr")
new_packages <- required_packages[!(required_packages %in% installed.packages()[,"Package"])]
if(length(new_packages)) install.packages(new_packages, type = "binary")
library(glue)
library(readr)
library(dplyr)
library(ggplot2)
library(knitr)
required_packages <- c("glue", "readr", "dplyr", "ggplot2", "knitr")
new_packages <- required_packages[!(required_packages %in% installed.packages()[,"Package"])]
if(length(new_packages)) install.packages(new_packages, type = "binary")
library(glue)
library(readr)
library(dplyr)
library(ggplot2)
library(knitr)
knitr::opts_chunk$set(echo = TRUE)
required_packages <- c("glue", "readr", "dplyr", "ggplot2", "knitr")
library(glue)
library(readr)
library(dplyr)
library(ggplot2)
library(knitr)
knitr::opts_chunk$set(echo = TRUE)
# Define required packages
required_packages <- c("glue", "readr", "dplyr", "ggplot2", "knitr")
# Install missing packages
new_packages <- required_packages[!(required_packages %in% installed.packages()[, "Package"])]
if (length(new_packages)) install.packages(new_packages, type = "binary")
# Suppress startup messages while loading packages
suppressPackageStartupMessages({
library(glue)
library(readr)
library(dplyr)
library(ggplot2)
library(knitr)
})
TV_series_data_clean <- read_csv("TV_series_data_clean.csv", show_col_types = FALSE)
TV_series_data_clean <- read_csv("TV_series_data_clean.csv", show_col_types = FALSE)
View(TV_series_data_clean)
library(knitr)
## find all the columns we  have in the first place
columns = colnames(TV_series_data_clean)
## create 3 empty dataframes. the first one stores whether a vector is a character or numeric. then based on this
data_types_summary = data.frame(variable = character(), type = character(), percentage_na = character(), stringsAsFactors = FALSE)
data_types_numeric = data.frame(variable = character(), minimum = numeric(), maximum = numeric(), average_mean = numeric(), average_median = numeric(), average_mode = numeric(), binary = numeric(), stringsAsFactors = FALSE)
data_types_char = data.frame(variable = character(), unique_values = character(), stringsAsFactors = FALSE)
## We could not find a mode average function in r so we got this one from online
## https://www.tutorialspoint.com/r/r_mean_median_mode.htm
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
## Create a function whether a variable is binary
binary_check = function(v) {
if (all(v %in% c(0, 1))) {
return(1)
} else {
return(0)
}
}
for (col in columns) {
column_type = class(TV_series_data_clean[[col]])
amount_na = (mean(is.na(TV_series_data_clean[[col]]))) * 100
## df1: The type of data from our main dataframe
data_types_summary <- rbind(data_types_summary, data.frame(variable = col, type = column_type, percentage_na = amount_na, stringsAsFactors = FALSE))
if (column_type == "numeric") {
## DF2: if a value is numeric the min and max value will be collected for this variable
min_value = min(TV_series_data_clean[[col]], na.rm = T)
max_value = max(TV_series_data_clean[[col]], na.rm = T)
mean_value =  mean(TV_series_data_clean[[col]], na.rm = T)
median_value = median(TV_series_data_clean[[col]], na.rm = T)
mode_value = getmode(TV_series_data_clean[[col]])
binary_value = binary_check(TV_series_data_clean[[col]])
data_types_numeric <- rbind(data_types_numeric, data.frame(variable = col, minumum = min_value, maximum = max_value, average_mean = mean_value, average_median = median_value, average_mode = mode_value, binary = binary_value, stringsAsFactors = FALSE))
} else {
## DF3: if a value is not numeric it has to be character so the number of NAs are collected
number_unique_var = length(unique(TV_series_data_clean[[col]]))
data_types_char <- rbind(data_types_char, data.frame(variable = col, unique_values = number_unique_var, stringsAsFactors = FALSE))
}
}
kable(data_types_summary)
kable(data_types_numeric)
kable(data_types_char)
TV_series_data_clean = TV_series_data_clean %>%
filter(startYear < 2024)
library(ggplot2)
ggplot(data_types_summary, aes(x = reorder(variable, -percentage_na), y = percentage_na)) +
geom_bar(stat = "identity") +
labs(title = "NA vs Non-NA Values for All Columns",
x = "Type variable",
y = "Percentage of na values") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
library(glue)
library(dplyr)
## collecting variables for which there is no data (100 percent NA)
all_missing_data <- data_types_summary$variable[which(data_types_summary$percentage_na == 100)]
# Print the result
glue("missing all the data for: {all_missing_data}")
## Remove variables that dont say much (for example all values are 1 or 1 and NA)
useless_columns = c("isOriginalTitle", "ordering", "types")
useless_columns <- unique(c(all_missing_data, useless_columns))
TV_series_data_clean <- TV_series_data_clean %>%
select(-all_of(useless_columns))
library(ggplot2)
library(dplyr)
### values which in the summary had more than one percent NA's
target_columns = data_types_summary$variable[which(data_types_summary$percentage_na > 1)]
## TAKE out already removed columns
columns = colnames(TV_series_data_clean)
target_columns <- target_columns[target_columns %in% columns]
irrelevant_for_eda = c("title", "Genre1_encoded", "Genre2_encoded", "Genre3_encoded")
target_columns <- target_columns[!target_columns %in% irrelevant_for_eda]
for (col in target_columns) {
print(
ggplot(TV_series_data_clean, aes(x = as.factor(Renewed), fill = as.factor(is.na(TV_series_data_clean[[col]])))) +
geom_bar(position = "dodge") +
labs(title = paste("Comparison of NA vs. Non-NA in", col, "and TV Show Renewal"),
x = "Renewal Status",
y = "Count",
fill = "Category") +
scale_fill_manual(values = c("TRUE" = "red", "FALSE" = "blue"),
labels = c(paste(col, "Data Available"), paste(col, "Data Missing"))) +
theme_minimal()
)
}
library(dplyr)
library(knitr)
na_summary_df <- data.frame(
Variable = character(),
Na_total = numeric(),
na_total_renewed = numeric(),
na_total_not_renewed = numeric(),
na_percentage_total = numeric(),
na_percentage_renewed = numeric(),
na_percentage_not_renewed = numeric(),
stringsAsFactors = FALSE
)
for (col in target_columns) {
Na_count <- sum(is.na(TV_series_data_clean[[col]]))
na_count_renewed <- sum(is.na(TV_series_data_clean[[col]]) & TV_series_data_clean$Renewed == 1)
na_count_not_renewed <- sum(is.na(TV_series_data_clean[[col]]) & TV_series_data_clean$Renewed == 0)
Na_percentage <- (Na_count / nrow(TV_series_data_clean)) * 100
Na_percentage_renew <- (na_count_renewed / sum(TV_series_data_clean$Renewed == 1)) * 100
Na_percentage_not_renew <- (na_count_not_renewed / sum(TV_series_data_clean$Renewed == 0)) * 100
na_summary_df <- rbind(na_summary_df, data.frame(
Variable = col,
Na_total = Na_count,
na_total_renewed = na_count_renewed,
na_total_not_renewed = na_count_not_renewed,
na_percentage_total = Na_percentage,
na_percentage_renewed = Na_percentage_renew,
na_percentage_not_renewed = Na_percentage_not_renew
))
}
# Print final dataframe
kable(na_summary_df)
library(dplyr)
TV_series_data_clean = TV_series_data_clean %>%
filter(!is.na(averageRating) & !is.na(numVotes))
remaining_columns = colnames(TV_series_data_clean)
columns_not_for_data_analysis = c("tconst", "parentTconst", "primaryTitle", "originalTitle", "title", "types")
remaining_columns <- setdiff(remaining_columns, columns_not_for_data_analysis)
print("We are going to look at the following variables in our EDA")
print(remaining_columns)
remaining_columns_sans_genre = c("isAdult", "startYear", "endYear", "averageRating", "numVotes", "Renewed")
for (col in remaining_columns_sans_genre) {
## IF the factor was previously identified as numeric
data_type = data_types_summary[which(data_types_summary$variable == col),"type"]
if (data_type == "numeric") {
binary = data_types_numeric[which(data_types_numeric$variable == col),"binary"]
if (binary == 0) {
boxplot(TV_series_data_clean[[col]], main = paste("Boxplot of", col), ylab = col)
} else {
barplot(table(TV_series_data_clean[[col]]), main = paste("Barplot of", col), xlab = col, ylab = "Count")
}
}
}
library(dplyr)
library(tidyr)
library(knitr)
genre_counts <- TV_series_data_clean %>%
select(Genre1, Genre2, Genre3) %>%
pivot_longer(cols = everything(), names_to = "Genre_Type", values_to = "Genre") %>%
drop_na() %>%
count(Genre, sort = TRUE)
# Display the result
genre_counts = genre_counts %>%
mutate(percentage = (n/sum(n)*100))
kable(genre_counts)
ggplot(genre_counts, aes(x = reorder(Genre, -n), y = n, fill = Genre)) +
geom_bar(stat = "identity") +
labs(title = "TV Genre Distribution", x = "Genres", y = "Count") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
guides(fill = "none")
ggplot(genre_counts, aes(x = reorder(Genre, -n), y = n, fill = Genre)) +
geom_bar(stat = "identity") +
labs(title = "TV Genre Distribution", x = "Genres", y = "Count") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
guides(fill = "none")
